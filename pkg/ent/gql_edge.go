// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (r *Role) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryUsers().All(ctx)
	}
	return result, err
}

func (r *Role) UserRoles(ctx context.Context) (result []*UserRole, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedUserRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.UserRolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryUserRoles().All(ctx)
	}
	return result, err
}

func (u *User) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRoles().All(ctx)
	}
	return result, err
}

func (u *User) UserRoles(ctx context.Context) (result []*UserRole, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserRolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserRoles().All(ctx)
	}
	return result, err
}

func (ur *UserRole) User(ctx context.Context) (*User, error) {
	result, err := ur.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ur.QueryUser().Only(ctx)
	}
	return result, err
}

func (ur *UserRole) Role(ctx context.Context) (*Role, error) {
	result, err := ur.Edges.RoleOrErr()
	if IsNotLoaded(err) {
		result, err = ur.QueryRole().Only(ctx)
	}
	return result, err
}
