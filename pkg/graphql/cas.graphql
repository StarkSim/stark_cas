directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateRoleInput is used for create Role object.
Input was generated by ent.
"""
input CreateRoleInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String
  userIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String
  phone: String!
  roleIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "cas/pkg/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  roles: [Role!]!
  users: [User!]!
}
type Role implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  name: String!
  users: [User!]
  userRoles: [UserRole!]
}
"""Ordering options for Role connections"""
input RoleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Roles."""
  field: RoleOrderField!
}
"""Properties by which Role connections can be ordered."""
enum RoleOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
"""
RoleWhereInput is used for filtering Role objects.
Input was generated by ent.
"""
input RoleWhereInput {
  not: RoleWhereInput
  and: [RoleWhereInput!]
  or: [RoleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """user_roles edge predicates"""
  hasUserRoles: Boolean
  hasUserRolesWith: [UserRoleWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateRoleInput is used for update Role object.
Input was generated by ent.
"""
input UpdateRoleInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  name: String
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  name: String
  phone: String
  addRoleIDs: [ID!]
  removeRoleIDs: [ID!]
}
type User implements Node @key(fields: "id") {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  name: String!
  phone: String!
  roles: [Role!]
  userRoles: [UserRole!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
  PHONE
}
type UserRole implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  userID: ID!
  roleID: ID!
  user: User!
  role: Role!
}
"""Ordering options for UserRole connections"""
input UserRoleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserRoles."""
  field: UserRoleOrderField!
}
"""Properties by which UserRole connections can be ordered."""
enum UserRoleOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
UserRoleWhereInput is used for filtering UserRole objects.
Input was generated by ent.
"""
input UserRoleWhereInput {
  not: UserRoleWhereInput
  and: [UserRoleWhereInput!]
  or: [UserRoleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """roles edge predicates"""
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
  """user_roles edge predicates"""
  hasUserRoles: Boolean
  hasUserRolesWith: [UserRoleWhereInput!]
}

# Custom graphql

type Mutation {
  createRole(input: CreateRoleInput!): Role
  updateRole(id: ID!, input: UpdateRoleInput!): Role
  deleteRole(id: ID!): Role!
}

extend type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(id: ID!, input: UpdateUserInput!): User
  deleteUser(id: ID!): User
}

# 登录业务
input loginReq {
  phone: String!
}

extend type Query {
  login(req: loginReq!): User
}

input RegisterReq {
  phone: String!
}

extend type Mutation {
  register(req: RegisterReq!): User
}
